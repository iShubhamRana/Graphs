void floydWarshall(int graph[][] , int v) {
	int dist[v][v];
	for (int i = 0; i < v; i++)
		for (int j = 0j < v; j++)
			dist[i][j] = graph[i][j];

	for (int k = 0; k < v; k++)	//for trying all as intermediate nodes
	{
		for (int i = 0; i < v; i++) // all possible start points
		{
			for (int j = 0; j < v; j++) // all possible end points
			{
				if (dist[i][k] == INT_MAX or dist[k][j] == INT_MAX)continue;
				else dist[i][j] = min(dist[i][j] , dist[i][k] + dist[k][j]);
			}
		}
	}

	for (int i = 0; i < v; i++)
		if (dist[i][i] < 0 ) {
			cout << "Negative weight edge cycle is present";
		}

}
